@page "/front"
@using TennisStoreSharedLibrary.Responses
@implements IDisposable

@if (ProductService.IsVisible)
{
    <LoadingPage />
}
else
{
    <div class="container">
        <div class="row">
            <div class="col-md-12">
                @if (ProductService.FeaturedProducts is not null)
                {
                    <div class="control-container text-dark">
                        <SfCarousel ButtonsVisibility="CarouselButtonVisibility.VisibleOnHover" AnimationEffect="CarouselAnimationEffect.Slide" AutoPlay="true" ShowIndicators="true">
                            <ChildContent>
                                @foreach (Product product in ProductService.FeaturedProducts.OrderByDescending(_ => _.DateUploaded).Take(5)!)
                                {
                                    <CarouselItem>
                                        <figure>
                                            <img src="@product.Base64Img" width="250" height="380" class="float-end" style="cursor:pointer;" @onclick="() => ViewProduct(product)" />
                                        </figure>
                                        <div class="d-flex justify-content-center">
                                            <div style="position:absolute; bottom:50px">
                                                <div class="vstack gap-3 mb-3">
                                                    <div>
                                                        <p>
                                                            <span style="font-family:Impact; text-indent:2px; cursor:pointer;" class="text-dark fw-bold display-2" @onclick="() => ViewProduct(product)">
                                                                @product.Name
                                                                <sup style="font-family:'Courier New'">
                                                                    <span class="badge rounded-pill bg-primary fs-6">@(GetNewLabel(product.DateUploaded))</span>
                                                                    <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger" style="font-family:sans-serif; font-size:11px;">
                                                                        @((product.Quantity - 1) > 0 ? $"{product.Quantity - 1}+" : product.Quantity)
                                                                        <span class="visually-hidden">unread messages</span>
                                                                    </span>
                                                                </sup>
                                                            </span>
                                                        </p>
                                                    </div>

                                                    <p class="text-muted fs-5 w-75" style="text-align:justify-all;font-family:Cambria">@(General.GetDescription(product.Description!))</p>
                                                </div>
                                                <div class="hstack gap-1 d-flex justify-content-center">
                                                    <button class="btn btn-secondary fw-bold" id="styleButton" style="cursor:pointer;" @onclick="() => ViewProduct(product)"><i class="fa fa-list"></i>Details</button>
                                                    <button class="btn btn-outline-danger fw-bold" id="styleButton" style="cursor:pointer;" @onclick="() => AddToCart(product)"><i class="fa fa-cart-plus"></i>BUY NOW</button>
                                                </div>
                                            </div>
                                        </div>
                                    </CarouselItem>
                                }
                            </ChildContent>
                            <PreviousButtonTemplate>
                                <img src="../resources/lessthan.png" width="50" height="50" id="styleCursor" />
                            </PreviousButtonTemplate>
                            <NextButtonTemplate>
                                <img src="../resources/greaterthan.png" width="50" height="50" id="styleCursor" />
                            </NextButtonTemplate>

                            <IndicatorsTemplate>
                                <div class="indicator"></div>
                            </IndicatorsTemplate>
                        </SfCarousel>
                    </div>
                }
                else
                {
                    <div class="alert alert-info">No products available</div>
                }
            </div>

        </div>
    </div>
}
<MessageDialog @ref="messageDialogService.messageDialog"></MessageDialog>


@code {
    List<Product>? FeaturedProductsList = new();

    protected override async Task OnInitializedAsync()
    {
        bool featured = true;
        await ProductService.GetAllProducts(featured);
        ProductService.ProductAction += StateHasChanged;
        messageDialogService.Action += StateHasChanged;
    }

    private async Task RetrieveFeaturedProducts()
    {
        FeaturedProductsList?.Clear();
        bool featured = true;
        await ProductService.GetAllProducts(featured);
        var data = ProductService.FeaturedProducts;
    }

    string GetNewLabel(DateTime dateUploaded)
    {
        int maxDays = 30;
        int productDateAfterUploaded = (DateTime.Now - dateUploaded).Days;
        return productDateAfterUploaded <= maxDays ? "New" : null!;
    }

    async Task AddToCart(Product product) => DisplayResponse(await cartServiec.AddToCart(product));

    void ViewProduct(Product product) => NavManager.NavigateTo($"/products/{product.Id}");

    private void DisplayResponse(ServiceResponse serviceResponse)
    {
        if (serviceResponse.Flag)
            messageDialogService.messageDialog!.SetDialogValues("success", serviceResponse.Message);
        else
            messageDialogService.messageDialog!.SetDialogValues("warning", serviceResponse.Message);

        messageDialogService.SetMessageDialog();
    }

    public void Dispose()
    {
        ProductService.ProductAction -= StateHasChanged;
        messageDialogService.Action -= StateHasChanged;
    }
}
