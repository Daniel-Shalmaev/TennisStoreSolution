@page "/product/{id:int}"
@using System.Text.RegularExpressions

@inject IProductService ProductService

<div class="container">
    <div class="breadcrumb">
        <div class="breadcrumb-navigation">
            <div class="breadcrumb-list">
                <ol>
                    <li><a href="/">דף הבית</a></li>
                    @if (CurrentProduct?.Category != null)
                    {
                        <li>
                            <a href="@($"/category/{CurrentProduct.Category.Id}")">@CurrentProduct.Category.Name</a>
                        </li>
                    }
                    @if (!string.IsNullOrEmpty(CurrentProduct?.SubCategory?.Name))
                    {
                        <li>
                            <a href="@($"/subcategory/{CurrentProduct.SubCategory.Id}")">@CurrentProduct.SubCategory.Name</a>
                        </li>
                    }
                    <li>@CurrentProduct?.Name</li>
                </ol>
            </div>
            @if (CurrentProduct?.Brand != null)
            {
                <div class="watch-brand-page">
                    <NavLink href="@($"/brand/{CurrentProduct?.BrandId}")">
                        <h3>לצפייה במגוון מוצרי @CurrentProduct!.Brand.HebName</h3>
                    </NavLink>
                </div>
            }
        </div>
        <div class="breadcrumb-save-button">
            <button class="btn-primary" @onclick="ToggleSaveIcon">
                <span>שמירה</span>
                <i class="fa-regular fa-bookmark favorite-icon"></i>
            </button>
        </div>
    </div>
    <section class="main">
        <div class="gallery">
            <div class="main-img">
                <img class="active" src="@CurrentProduct?.Image1" alt="@CurrentProduct?.Name" />
            </div>
            <div class="thumb-list">
                @foreach (var productAttribute in CurrentProduct?.Attributes ?? Enumerable.Empty<ProductAttribute>())
                {
                    <div>
                        <img src="@productAttribute.Value" alt="@productAttribute.Attribute?.Name" />
                    </div>
                }
            </div>
        </div>

        <div class="content">
            <h2 class="h2-product-name">@CurrentProduct?.Name</h2>
            <NavLink href="@($"/category/{CurrentProduct?.Category?.Id}")">
                <h3>@CurrentProduct?.Category?.Name</h3>
            </NavLink>
            <p>@CurrentProduct?.ShortDescription</p>
            <div class="price-info">
                <div class="price">
                    <span class="current-price">₪@CurrentProduct?.Price</span>
                    @if (CurrentProduct?.OldPrice > 0)
                    {
                        <span class="prev-price">₪@CurrentProduct?.OldPrice</span>
                    }
                </div>
            </div>
            <div class="add-to-cart-container">
                <div class="counter">
                    <button @onclick="DecreaseQty">-</button>
                    <span class="count">@Qty</span>
                    <button @onclick="IncreaseQty">+</button>
                </div>
                <button class="btn-primary" @onclick="AddToCart">
                    הוסף לעגלה
                    <i class="fa-solid fa-cart-plus add-to-cart-icon"></i>
                </button>
            </div>
        </div>
    </section>
    <div class="container">
        <div class="product-description-container">
            <h2 class="product-description-title">@ProductTitle</h2>
            @foreach (var paragraph in ProductParagraphs)
            {
                <p class="product-description-text">@paragraph</p>
            }
            <ul class="product-description-list">
                @foreach (var item in ProductListItems)
                {
                    <li class="product-description-list-item">@item</li>
                }
            </ul>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private string ProductTitle { get; set; } = string.Empty;
    private List<string> ProductParagraphs { get; set; } = new List<string>();
    private List<string> ProductListItems { get; set; } = new List<string>();


    private Product? CurrentProduct { get; set; }
    private int Qty { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        CurrentProduct = await ProductService.GetProductById(Id);

        if (CurrentProduct?.LongDescription != null)
            ParseDescription(CurrentProduct.LongDescription);
    }

    private void IncreaseQty() => Qty++;

    private void DecreaseQty()
    {
        if (Qty > 1) Qty--;
    }

    private async void AddToCart() => await CartService.AddToCart(CurrentProduct!, Qty);


    private void ToggleSaveIcon()
    {
        Console.WriteLine("ok");
    }

    private void ParseDescription(string? rawHtml)
    {
        if (string.IsNullOrWhiteSpace(rawHtml))
            return;

        var h2Match = Regex.Match(rawHtml, @"<h2>(.*?)<\/h2>");
        ProductTitle = h2Match.Success ? h2Match.Groups[1].Value.Trim() : string.Empty;

        var pMatches = Regex.Matches(rawHtml, @"<p>(.*?)<\/p>");
        foreach (Match match in pMatches)
            ProductParagraphs.Add(match.Groups[1].Value.Trim());

        var liMatches = System.Text.RegularExpressions.Regex.Matches(rawHtml, @"<li>(.*?)<\/li>");
        foreach (Match match in liMatches)
            ProductListItems.Add(match.Groups[1].Value.Trim());
    }

}
