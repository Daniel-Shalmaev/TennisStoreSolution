@page "/products"
@implements IDisposable
@if (ProductService.IsVisible)
{
    <LoadingPage />
}
else
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-lg-2">
                <CategoriesPage CategoryClickedEvent="CategoryClickedEvent" DeafaultCategoryClickedEvent="DeafaultCategoryClickedEvent" />
            </div>
            <div class="col-lg-10">
                <BannerPage />
                <div class="card border-0">
                    <div class="card-header border-success mb-2"></div>
                    @if (ShowProductList)
                    {
                        <ProductListPage AllProducts="ProductService.ProductsByCategory ?? ProductService.AllProducts" HandleProductDetailsEvent="HandleProductDetailsEvent" />
                    }
                    @if (ShowProductDetails)
                    {
                        <ProductDetails HandleBackClickedEvent="HandleBackClickedEvent" Product="ProductDetails" />
                    }
                </div>
            </div>
            <div class="col-lg-12 mt-5">
                <div class="card border-0" style="position:absolute;left:1px;right:1px;">
                    <div class="card-header border-dark-subtle">Recommended Products</div>
                    <RecommendedPage />
                </div>
            </div>
        </div>
    </div>
}

@code {
    public bool ShowProductList { get; set; } = true;
    public bool ShowProductDetails { get; set; } = false;
    public Product ProductDetails { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        ProductService.ProductAction += StateHasChanged;
    }

    private async void CategoryClickedEvent(int categoryId)
    {
        if (categoryId == 0) return;
        await ProductService.GetProductsByCategory(categoryId);
    }

    private async void DeafaultCategoryClickedEvent(int categoryId)
    {
        ProductService.ProductsByCategory = null!;
        await LoadData();
    }

    async Task LoadData()
    {
        bool featured = false;
        await ProductService.GetAllProducts(featured);
    }

    public void Dispose() => ProductService.ProductAction -= StateHasChanged;

    void HandleBackClickedEvent()
    {
        ShowProductDetails = false;
        ShowProductList = true;
    }

    void HandleProductDetailsEvent(Product viewProduct)
    {
        ProductDetails = viewProduct;
        ShowProductDetails = true;
        ShowProductList = false;
    }
}