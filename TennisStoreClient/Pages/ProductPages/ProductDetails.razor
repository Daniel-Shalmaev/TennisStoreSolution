@using TennisStoreSharedLibrary.Models
@using TennisStoreSharedLibrary.Responses
@implements IDisposable

<div class="container-fluid">
    <div class="row">
        <div class="col-lg-12">
            <div class="card">
                <div class="card-header">Product Details</div>
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <img src="@Product!.Image1" width="150" height="250" />
                        <div class="card-body">
                            <p>
                                <div class="vstack gap-2">
                                    <h3>@Product.Name</h3>
                                    <div class="hstack gap-2">
                                        <span>Category:</span>
                                        <span>
                                            @if (Product is not null)
                                            {
                                                <span>@Product.Category!.Name</span>
                                            }
                                        </span>
                                    </div>
                                    <div class="hstack gap-2">
                                        <span>Quantity:</span>
                                        <span>@Product!.Quantity</span>
                                    </div>
                                    <div class="hstack gap-2">
                                        <span>Description:</span>
                                        <span>@Product.ShortDescription</span>
                                    </div>
                                    <div class="hstack gap-2">
                                        <span>Price:</span>
                                        <span class="text-danger">@Product.Price.ToString("$#.##")</span>
                                    </div>
                                </div>
                            </p>
                        </div>
                    </div>
                </div>
                <div class="card-footer">
                    <button class="btn btn-info" @onclick="BackClicked"><i class="fa fa-angle-left"></i>Back</button>
                    <button class="btn btn-danger" style="margin-left:20px;" @onclick="AddToCart"><i class="fa fa-cart-shopping"></i>Add to Cart</button>
                </div>
            </div>
        </div>
    </div>
</div>
<MessageDialog @ref="MessageDialogService.messageDialog"></MessageDialog>


@code {
    [Parameter] public Product? Product { get; set; } = new();
    [Parameter] public EventCallback HandleBackClickedEvent { get; set; }

    protected override void OnInitialized() => MessageDialogService.Action += StateHasChanged;

    async Task BackClicked() => await HandleBackClickedEvent.InvokeAsync();

    async Task AddToCart(){
        if (Product is null) return;
        DisplayResponse(await CartService.AddToCart(Product!));
    }

    private void DisplayResponse(ServiceResponse serviceResponse)
    {
        if (serviceResponse.Flag)
            MessageDialogService.messageDialog!.SetDialogValues("success", serviceResponse.Message);
        else
            MessageDialogService.messageDialog!.SetDialogValues("warning", serviceResponse.Message);

        MessageDialogService.SetMessageDialog();
    }

    public void Dispose() => MessageDialogService.Action -= StateHasChanged;
}
