@page "/add-product"
@implements IDisposable

<div class="container form-rtl">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <EditForm Model="MyProduct" OnValidSubmit="HandleSaveProduct">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="card custom-card">
                    <div class="card-header bg-primary text-white">הוספת מוצר חדש</div>

                    <div class="card-body">
                        <div class="form-group">
                            <label class="form-label">שם מוצר</label>
                            <InputText @bind-Value="MyProduct.Name" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label class="form-label">בחר קטגוריה</label>
                            @if (CategoryService.AllCategories is not null)
                            {
                                <InputSelect class="form-select" @bind-Value="MyProduct.CategoryId">
                                    <option value="">-- בחר קטגוריה --</option>
                                    @foreach (var category in CategoryService.AllCategories)
                                    {
                                        <option value="@category.Id">@category.Name</option>
                                    }
                                </InputSelect>
                            }
                        </div>

                        <div class="form-group">
                            <label class="form-label">מחיר</label>
                            <InputNumber @bind-Value="MyProduct.Price" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label class="form-label">כמות</label>
                            <InputNumber @bind-Value="MyProduct.Quantity" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label class="form-label">תיאור</label>
                            <InputTextArea @bind-Value="MyProduct.LongDescription" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label class="form-label @(ImageUploadMessage == "" ? "" : "text-danger")">
                                @(ImageUploadMessage == "" ? "העלה תמונה" : ImageUploadMessage)
                            </label>
                            <InputFile OnChange="UploadImage" class="form-control" />
                        </div>
                    </div>

                    <div class="card-footer text-end">
                        @if (MessageDialogService.ShowSaveButton)
                        {
                            <button type="submit" class="btn btn-success">💾 שמור מוצר</button>
                        }
                        <BusyButtonComponent ShowBusyButton="MessageDialogService.ShowBusyButton"></BusyButtonComponent>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<MessageDialog @ref="MessageDialogService.messageDialog"></MessageDialog>

@code {
    Product MyProduct = new();
    string ImageUploadMessage = "";

    protected async override Task OnInitializedAsync()
    {
        await CategoryService.GetAllCategories();
        CategoryService.CategoryAction += StateHasChanged;
        MessageDialogService.Action += StateHasChanged;
    }

    async Task HandleSaveProduct()
    {
        MessageDialogService.ShowSaveButton = false;
        MessageDialogService.ShowBusyButton = !MessageDialogService.ShowSaveButton;
        if (string.IsNullOrEmpty(MyProduct.Image1))
        {
            MessageDialogService.messageDialog!.SetDialogValues("warning", "You need to choose image");
            MessageDialogService.SetMessageDialog();
            return;
        }

        var (flag, message) = await ProductService.AddProduct(MyProduct);
        if (flag)
            MessageDialogService.messageDialog!.SetDialogValues("success", message);
        else
            MessageDialogService.messageDialog!.SetDialogValues("danger", message);
        MessageDialogService.SetMessageDialog();
        return;
    }

    async Task UploadImage(InputFileChangeEventArgs e)
    {
        var format = e.File.Name.ToLower().EndsWith(".png") ? "image/png" :
                     e.File.Name.ToLower().EndsWith(".jpg") || e.File.Name.ToLower().EndsWith(".jpeg") ? "image/jpeg" : null;

        if (format == null)
        {
            ImageUploadMessage = "PNG or JPG file needed";
            return;
        }

        var resizeImage = await e.File.RequestImageFileAsync(format, 300, 300);
        var buffer = new byte[resizeImage.Size];
        await resizeImage.OpenReadStream().ReadAsync(buffer);
        MyProduct.Image1 = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        ImageUploadMessage = "";
    }


    public void Dispose()
    {
        CategoryService.CategoryAction -= StateHasChanged;
        MessageDialogService.Action -= StateHasChanged;
    }
}
