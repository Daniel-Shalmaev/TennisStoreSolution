@page "/my-cart"
@using Syncfusion.Blazor.Navigations
@using TennisStoreClient.PrivateModels
@using TennisStoreSharedLibrary.Models
@using TennisStoreSharedLibrary.Responses
@using Order = TennisStoreClient.PrivateModels.Order;

<div class="container">
    <div class="cart-container">
        <h1 class="cart-title">עגלת הקניות שלי</h1>
        <div class="cart-layout">
            <div class="cart-summary">
                <h2>סיכום סל הקניות - <span>@MyCartOrders.Sum(item => item.Quantity)</span> פריטים</h2>
                <div class="summary-details">
                    <p>סה"כ: <span class="total-price">₪@MyCartOrders.Sum(_ => _.SubTotal).ToString("#.##")</span></p>
                    <p>משלוח: יתווסף לאחר בחירת אפשרות</p>
                    <p><strong>סה"כ לתשלום:</strong> יותאם בסיום</p>
                </div>
                <button class="checkout-button">
                    מעבר לתשלום <i class="fa fa-credit-card"></i>
                </button>
                <button class="coupon-button">
                    יש לך קופון? <i class="fa fa-tag"></i>
                </button>
                <div class="gift-card-section">
                    <h3>מימוש גיפט קארד</h3>
                    <input type="text" class="gift-card-input" placeholder="הזן קוד גיפט קארד" @bind="GiftCardCode">
                    <button class="gift-card-button" @onclick="RedeemGiftCard">
                        טען יתרה <i class="fa fa-gift"></i>
                    </button>
                </div>
            </div>

            <div class="cart-items">
                @foreach (var item in MyCartOrders)
                {
                    <div class="cart-item">
                        <img class="item-image" src="https://i.imgur.com/@item.Image" alt="@item.Name">
                        <div class="item-details">
                            <h3>@item.Name</h3>
                            <p>מחיר יחידה: ₪@item.Price</p>
                            <div class="quantity-control">
                                <button class="quantity-btn" @onclick="() => DecreaseQuantity(item)">-</button>
                                <span class="quantity">@item.Quantity</span>
                                <button class="quantity-btn" @onclick="() => IncreaseQuantity(item)">+</button>
                            </div>
                            <p>סה"כ: ₪@item.SubTotal</p>
                        </div>
                        <button class="delete-button" @onclick="async () => await DeleteCart(item)">
                            מחק <i class="fa fa-trash"></i>
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>


@code {
    public List<Order> MyCartOrders = new();
    public string GiftCardCode { get; set; } = string.Empty;

    protected async override Task OnInitializedAsync()
    {
        var cartItems = await CartService.MyOrders();

        foreach (var cartItem in cartItems)
        {
            var productDetails = await ProductService.GetProductById(cartItem.Id);

            if (productDetails != null)
            {
                MyCartOrders.Add(new Order
                {
                    Id = productDetails.Id,
                    Name = productDetails.Name,
                    Image = productDetails.Image1,
                    Price = productDetails.Price,
                    Quantity = cartItem.Quantity
                });
            }
        }
    }

    private async Task IncreaseQuantity(Order order)
    {
        order.Quantity++;
        await UpdateCart(order);
    }

    private async Task DecreaseQuantity(Order order)
    {
        if (order.Quantity > 1)
        {
            order.Quantity--;
             await UpdateCart(order);
        }
    }

    private async Task UpdateCart(Order order)
    {
        await CartService.AddToCart(new Product { Id = order.Id }, order.Quantity);
    }

    private async Task DeleteCart(Order order)
    {
        await CartService.DeleteCart(order);
        MyCartOrders.Remove(order);
    }

    private async Task RedeemGiftCard()
    {
        
    }
}
